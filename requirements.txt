# =============================================================================
# 🛠️  Setup Instructions
# -----------------------------------------------------------------------------
# Create virtual environment:
#   python3 -m venv venv
#   source venv/bin/activate
#
# Install dependencies:
#   pip install -r requirements.txt
#
# Freeze exact versions for deployment:
#   pip freeze > requirements.txt
# =============================================================================
# =============================================================================
# 📬 Email Handling and Parsing
# =============================================================================
# IMAPClient is a higher-level, easier-to-use IMAP library for Python.
# It's used to connect to and interact with mail servers (like Gmail or Synology Mail).
# Compared to imaplib, it's more Pythonic and less error-prone.
imapclient>=2.3
# email-validator validates, parses, and normalizes email addresses.
# It's useful to ensure extracted emails are syntactically valid before storing or displaying them.
# Also helps prevent false positives from regex-based extraction.
email-validator>=2.1.0
# HTML parsing — used to extract meeting links (Zoom, Teams, Meet) from email bodies
# Especially useful for parsing <a href="..."> tags in multipart "text/html" messages
beautifulsoup4>=4.12.0
# Web framework — lightweight alternative or complement to FastAPI for simple tasks or standalone scripts
# Useful if you want to build a quick webhook, dashboard, or local UI in parallel
flask>=2.3.0
# Date/time parsing — helps interpret dates in various formats (e.g., from email headers)
# Especially useful when dealing with timezone-aware datetimes and user-defined formats
python-dateutil>=2.8.2
# =============================================================================
# 🌐 Web Frameworks
# =============================================================================
# FastAPI is the core framework used to build the REST API endpoints.
# It's asynchronous, fast, and based on Python type hints.
fastapi==0.110.1
# Uvicorn is an ASGI server that runs the FastAPI application.
# It's lightweight and supports async I/O — perfect for FastAPI.
uvicorn==0.29.0
# Jinja2 is a templating engine used to render HTML pages dynamically.
# FastAPI uses it to serve HTML responses via TemplateResponse.
jinja2==3.1.3
# =============================================================================
# ⏱️ Scheduling Tools
# =============================================================================
# APScheduler allows scheduling jobs at fixed intervals, specific times, or cron-style.
# It can be used to run background tasks like scanning emails periodically.
apscheduler==3.10.4
# Task scheduler — a simple, human-readable way to schedule Python functions periodically
# Great for basic "every 10 minutes" jobs without needing APScheduler's full complexity
schedule>=1.2.1

sqlalchemy

# 🔍 Quick Comparison:
# -------------------------------
# | Feature / Aspect     | `apscheduler`                                 | `schedule`                                         |
# | -------------------- | --------------------------------------------- | -------------------------------------------------- |
# | 🔧 Complexity        | Medium to high                                | Very simple                                        |
# | 🧠 Use cases         | Production apps, web servers, persistent jobs | Lightweight scripts, CLI tools                     |
# | 🗓️ Scheduling types | Interval, cron, date, custom triggers         | Only fixed time intervals (e.g., every 10 minutes) |
# | 🧵 Async / Threading | Supports threading, multiprocessing, asyncio  | No native async or thread support                  |
# | 💾 Persistence       | Yes (with job stores: SQL, Redis, etc.)       | No persistence — jobs are in-memory only           |
# | 📦 Dependencies      | Heavier                                       | Very lightweight                                   |
# | 🔌 Integration       | Can be integrated into FastAPI, Flask         | Best used in isolated scripts                      |
